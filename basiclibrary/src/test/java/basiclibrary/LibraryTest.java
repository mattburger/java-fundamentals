/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {

    //dice tests
    @Test
    public void testRoll() {
        Library classUnderTest = new Library();
        int input = 4;
        int expectedOutput = 4;
        assertEquals("rollMethod return array of dice rolls of size n", expectedOutput, classUnderTest.roll(input).length );
    }
    @Test
    public void testRoll_noRolls() {
        Library classUnderTest = new Library();
        int input = 0;
        int expectedOutput = 0;
        assertEquals("rollMethod return array of dice rolls of size n", expectedOutput, classUnderTest.roll(input).length );
    }

    //duplicates tests
    @Test
    public void testContainsDuplicate_duplicates() {
        Library classUnderTest = new Library();
        int[] input = new int[]{1, 2, 3, 2, 5};
        assertTrue(" containsDuplicateMethod should return 'true' if the array has duplicate values and false if not", classUnderTest.containsDuplicate(input));
    }

    @Test
    public void testContainsDuplicate_noDuplicates() {
        Library classUnderTest = new Library();
        int[] input = new int[]{1, 2, 3, 4, 5};
        assertFalse(" containsDuplicateMethod should return 'true' if the array has duplicate values and false if not", classUnderTest.containsDuplicate(input));
    }

    @Test
    public void testContainsDuplicate_oneElement() {
        Library classUnderTest = new Library();
        int[] input = new int[]{1};
        assertFalse(" containsDuplicateMethod should return 'true' if the array has duplicate values and false if not", classUnderTest.containsDuplicate(input));
    }

    @Test
    public void testContainsDuplicate_empty() {
        Library classUnderTest = new Library();
        int[] input = new int[0];
        assertFalse(" containsDuplicateMethod should return 'true' if the array has duplicate values and false if not", classUnderTest.containsDuplicate(input));
    }

    //averages tests
    @Test
    public void testCalculateAverages() {
        Library classUnderTest = new Library();
        int[] input = new int[]{5, 5, 5, 5, 5};
        int expectedOutput = 5;
        assertEquals("calculateAverages should return the average of all the values in the array", expectedOutput, classUnderTest.calculateAverages(input) );
    }

    @Test
    public void testCalculateAverages_oneItem() {
        Library classUnderTest = new Library();
        int[] input = new int[]{5};
        int expectedOutput = 5;
        assertEquals("calculateAverages should return the average of all the values in the array", expectedOutput, classUnderTest.calculateAverages(input) );
    }

   @Test
    public void testCalculateAverages_empty() {
        Library classUnderTest = new Library();
        int[] input = new int[0];
        int expectedOutput = 0;
        assertEquals("calculateAverages should return 0", expectedOutput, classUnderTest.calculateAverages(input) );
    }

    //2d arr avg tests
    @Test
    public void testTwoDAvg() {
        Library classUnderTest = new Library();
        int[][] input = {
                {6, 4, 5, 6, 1, 5, 6},
                {5, 2, 3, 0, 1, 1, 6},
                {55, 54, 60, 53, 59, 57, 61},
                {85, 96, 65, 82, 95, 52, 87}
        };
        int[] expectedOutput = {5, 2, 3, 0, 1, 1, 6};
        assertArrayEquals("twoDAvg should return the array with the lowest average ", expectedOutput, classUnderTest.twoDAvg(input));
    }

    @Test
    public void testTwoDAvg_oneElement() {
        Library classUnderTest = new Library();
        int[][] input = {
                {6, 4, 5, 6, 1, 5, 6}
        };
        int[] expectedOutput = {6, 4, 5, 6, 1, 5, 6};
        assertArrayEquals("twoDAvg should return the only array", expectedOutput, classUnderTest.twoDAvg(input));
    }

    @Test
    public void testTwoDAvg_empty() {
        Library classUnderTest = new Library();
        int[][] input = new int[0][0];
        int[] expectedOutput = new int [1];
        assertArrayEquals("twoDAvg should return empty array", expectedOutput, classUnderTest.twoDAvg(input));
    }

    //tests for weather data analysis
    @Test
    public void testAnalyzeWeather() {
        Library classUnderTest = new Library();
        int[][] input = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        String expectedOutput = "High: 72\nLow: 51\nNever saw temperature: 63\nNever saw temperature: 67\nNever saw temperature: 68\nNever saw temperature: 69\n";
        assertEquals("analyzeWeather should return a string", expectedOutput, classUnderTest.analyzeWeather(input));
    }

    @Test
    public void testAnalyzeWeather_same() {
        Library classUnderTest = new Library();
        int[][] input = {
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1}
        };
        String expectedOutput = "High: 1\nLow: 1\n";
        assertEquals("analyzeWeather should return a string", expectedOutput, classUnderTest.analyzeWeather(input));
    }

    @Test
    public void testTally(){
        Library classUnderTest = new Library();
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String expectedOutput = "Bush received the most votes!";

        assertEquals("Should return a string indicating winner", expectedOutput, classUnderTest.tally(votes));
    }
}
